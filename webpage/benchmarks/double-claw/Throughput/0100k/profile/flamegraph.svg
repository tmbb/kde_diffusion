<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="390" onload="init(evt)" viewBox="0 0 1200 390" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="390" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="373.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="373.00"> </text><svg id="frames" x="10" width="1180" total_samples="1010"><g><title>__powidf2 (140 samples, 13.86%)</title><rect x="5.1485%" y="69" width="13.8614%" height="15" fill="rgb(252,49,23)" fg:x="52" fg:w="140"/><text x="5.3985%" y="79.50">__powidf2</text></g><g><title>expf32x (249 samples, 24.65%)</title><rect x="19.0099%" y="69" width="24.6535%" height="15" fill="rgb(215,19,7)" fg:x="192" fg:w="249"/><text x="19.2599%" y="79.50">expf32x</text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::map (436 samples, 43.17%)</title><rect x="0.8911%" y="85" width="43.1683%" height="15" fill="rgb(238,81,41)" fg:x="9" fg:w="436"/><text x="1.1411%" y="95.50">ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::map</text></g><g><title>malloc (4 samples, 0.40%)</title><rect x="43.6634%" y="69" width="0.3960%" height="15" fill="rgb(210,199,37)" fg:x="441" fg:w="4"/><text x="43.9134%" y="79.50"></text></g><g><title>ndarray::impl_ops::arithmetic_ops::&lt;impl core::ops::arith::Mul&lt;&amp;ndarray::ArrayBase&lt;S2,E&gt;&gt; for &amp;ndarray::ArrayBase&lt;S,D&gt;&gt;::mul (8 samples, 0.79%)</title><rect x="44.0594%" y="85" width="0.7921%" height="15" fill="rgb(244,192,49)" fg:x="445" fg:w="8"/><text x="44.3094%" y="95.50"></text></g><g><title>ndarray::impl_constructors::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::build_uninit (8 samples, 0.79%)</title><rect x="44.0594%" y="69" width="0.7921%" height="15" fill="rgb(226,211,11)" fg:x="445" fg:w="8"/><text x="44.3094%" y="79.50"></text></g><g><title>ndarray::zip::Zip&lt;(P1,P2,PLast),D&gt;::collect_with_partial (8 samples, 0.79%)</title><rect x="44.0594%" y="53" width="0.7921%" height="15" fill="rgb(236,162,54)" fg:x="445" fg:w="8"/><text x="44.3094%" y="63.50"></text></g><g><title>ndarray::impl_ops::arithmetic_ops::&lt;impl core::ops::arith::Mul&lt;ndarray::ArrayBase&lt;S2,E&gt;&gt; for ndarray::ArrayBase&lt;S,D&gt;&gt;::mul (16 samples, 1.58%)</title><rect x="44.8515%" y="85" width="1.5842%" height="15" fill="rgb(220,229,9)" fg:x="453" fg:w="16"/><text x="45.1015%" y="95.50"></text></g><g><title>ndarray::numeric::impl_numeric::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::sum (11 samples, 1.09%)</title><rect x="46.4356%" y="85" width="1.0891%" height="15" fill="rgb(250,87,22)" fg:x="469" fg:w="11"/><text x="46.6856%" y="95.50"></text></g><g><title>&lt;kde_diffusion::ZetaGammaLMinusT as argmin::core::problem::CostFunction&gt;::cost (481 samples, 47.62%)</title><rect x="0.0990%" y="101" width="47.6238%" height="15" fill="rgb(239,43,17)" fg:x="1" fg:w="481"/><text x="0.3490%" y="111.50">&lt;kde_diffusion::ZetaGammaLMinusT as argmin::core::problem::CostFunction&gt;::cost</text></g><g><title>powf64 (2 samples, 0.20%)</title><rect x="47.5248%" y="85" width="0.1980%" height="15" fill="rgb(231,177,25)" fg:x="480" fg:w="2"/><text x="47.7748%" y="95.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (1 samples, 0.10%)</title><rect x="47.7228%" y="101" width="0.0990%" height="15" fill="rgb(219,179,1)" fg:x="482" fg:w="1"/><text x="47.9728%" y="111.50"></text></g><g><title>clock_gettime (1 samples, 0.10%)</title><rect x="47.7228%" y="85" width="0.0990%" height="15" fill="rgb(238,219,53)" fg:x="482" fg:w="1"/><text x="47.9728%" y="95.50"></text></g><g><title>argmin::core::executor::Executor&lt;O,S,I&gt;::run (483 samples, 47.82%)</title><rect x="0.0990%" y="117" width="47.8218%" height="15" fill="rgb(232,167,36)" fg:x="1" fg:w="483"/><text x="0.3490%" y="127.50">argmin::core::executor::Executor&lt;O,S,I&gt;::run</text></g><g><title>std::time::Instant::elapsed (1 samples, 0.10%)</title><rect x="47.8218%" y="101" width="0.0990%" height="15" fill="rgb(244,19,51)" fg:x="483" fg:w="1"/><text x="48.0718%" y="111.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::sub_timespec (1 samples, 0.10%)</title><rect x="47.8218%" y="85" width="0.0990%" height="15" fill="rgb(224,6,22)" fg:x="483" fg:w="1"/><text x="48.0718%" y="95.50"></text></g><g><title>core::ptr::drop_in_place&lt;rustdct::plan::DctPlanner&lt;f64&gt;&gt; (1 samples, 0.10%)</title><rect x="47.9208%" y="117" width="0.0990%" height="15" fill="rgb(224,145,5)" fg:x="484" fg:w="1"/><text x="48.1708%" y="127.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.10%)</title><rect x="47.9208%" y="101" width="0.0990%" height="15" fill="rgb(234,130,49)" fg:x="484" fg:w="1"/><text x="48.1708%" y="111.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.10%)</title><rect x="47.9208%" y="85" width="0.0990%" height="15" fill="rgb(254,6,2)" fg:x="484" fg:w="1"/><text x="48.1708%" y="95.50"></text></g><g><title>core::ptr::drop_in_place&lt;rustdct::algorithm::type2and3_splitradix::Type2And3SplitRadix&lt;f64&gt;&gt; (1 samples, 0.10%)</title><rect x="47.9208%" y="69" width="0.0990%" height="15" fill="rgb(208,96,46)" fg:x="484" fg:w="1"/><text x="48.1708%" y="79.50"></text></g><g><title>kde_diffusion::ZetaGammaLMinusT::new (3 samples, 0.30%)</title><rect x="48.0198%" y="117" width="0.2970%" height="15" fill="rgb(239,3,39)" fg:x="485" fg:w="3"/><text x="48.2698%" y="127.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::map (3 samples, 0.30%)</title><rect x="48.0198%" y="101" width="0.2970%" height="15" fill="rgb(233,210,1)" fg:x="485" fg:w="3"/><text x="48.2698%" y="111.50"></text></g><g><title>__powidf2 (2 samples, 0.20%)</title><rect x="48.1188%" y="85" width="0.1980%" height="15" fill="rgb(244,137,37)" fg:x="486" fg:w="2"/><text x="48.3688%" y="95.50"></text></g><g><title>kde_diffusion::histogram (341 samples, 33.76%)</title><rect x="48.3168%" y="117" width="33.7624%" height="15" fill="rgb(240,136,2)" fg:x="488" fg:w="341"/><text x="48.5668%" y="127.50">kde_diffusion::histogram</text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::map (7 samples, 0.69%)</title><rect x="82.0792%" y="117" width="0.6931%" height="15" fill="rgb(239,18,37)" fg:x="829" fg:w="7"/><text x="82.3292%" y="127.50"></text></g><g><title>expf32x (6 samples, 0.59%)</title><rect x="82.1782%" y="101" width="0.5941%" height="15" fill="rgb(218,185,22)" fg:x="830" fg:w="6"/><text x="82.4282%" y="111.50"></text></g><g><title>ndarray::impl_ops::arithmetic_ops::&lt;impl core::ops::arith::Mul&lt;B&gt; for ndarray::ArrayBase&lt;S,D&gt;&gt;::mul (2 samples, 0.20%)</title><rect x="82.7723%" y="117" width="0.1980%" height="15" fill="rgb(225,218,4)" fg:x="836" fg:w="2"/><text x="83.0223%" y="127.50"></text></g><g><title>ndarray::impl_ops::arithmetic_ops::&lt;impl core::ops::arith::Mul&lt;ndarray::ArrayBase&lt;S2,E&gt;&gt; for ndarray::ArrayBase&lt;S,D&gt;&gt;::mul (1 samples, 0.10%)</title><rect x="82.9703%" y="117" width="0.0990%" height="15" fill="rgb(230,182,32)" fg:x="838" fg:w="1"/><text x="83.2203%" y="127.50"></text></g><g><title>&lt;rustdct::algorithm::type2and3_butterflies::Type2And3Butterfly16&lt;T&gt; as rustdct::Dct2&lt;T&gt;&gt;::process_dct2_with_scratch (1 samples, 0.10%)</title><rect x="83.1683%" y="37" width="0.0990%" height="15" fill="rgb(242,56,43)" fg:x="840" fg:w="1"/><text x="83.4183%" y="47.50"></text></g><g><title>rustdct::Dct2::process_dct2 (3 samples, 0.30%)</title><rect x="83.0693%" y="117" width="0.2970%" height="15" fill="rgb(233,99,24)" fg:x="839" fg:w="3"/><text x="83.3193%" y="127.50"></text></g><g><title>&lt;rustdct::algorithm::type2and3_splitradix::Type2And3SplitRadix&lt;T&gt; as rustdct::Dct2&lt;T&gt;&gt;::process_dct2_with_scratch (3 samples, 0.30%)</title><rect x="83.0693%" y="101" width="0.2970%" height="15" fill="rgb(234,209,42)" fg:x="839" fg:w="3"/><text x="83.3193%" y="111.50"></text></g><g><title>&lt;rustdct::algorithm::type2and3_splitradix::Type2And3SplitRadix&lt;T&gt; as rustdct::Dct2&lt;T&gt;&gt;::process_dct2_with_scratch (3 samples, 0.30%)</title><rect x="83.0693%" y="85" width="0.2970%" height="15" fill="rgb(227,7,12)" fg:x="839" fg:w="3"/><text x="83.3193%" y="95.50"></text></g><g><title>&lt;rustdct::algorithm::type2and3_splitradix::Type2And3SplitRadix&lt;T&gt; as rustdct::Dct2&lt;T&gt;&gt;::process_dct2_with_scratch (3 samples, 0.30%)</title><rect x="83.0693%" y="69" width="0.2970%" height="15" fill="rgb(245,203,43)" fg:x="839" fg:w="3"/><text x="83.3193%" y="79.50"></text></g><g><title>&lt;rustdct::algorithm::type2and3_splitradix::Type2And3SplitRadix&lt;T&gt; as rustdct::Dct2&lt;T&gt;&gt;::process_dct2_with_scratch (2 samples, 0.20%)</title><rect x="83.1683%" y="53" width="0.1980%" height="15" fill="rgb(238,205,33)" fg:x="840" fg:w="2"/><text x="83.4183%" y="63.50"></text></g><g><title>&lt;rustdct::algorithm::type2and3_butterflies::Type2And3Butterfly8&lt;T&gt; as rustdct::Dct2&lt;T&gt;&gt;::process_dct2_with_scratch (1 samples, 0.10%)</title><rect x="83.2673%" y="37" width="0.0990%" height="15" fill="rgb(231,56,7)" fg:x="841" fg:w="1"/><text x="83.5173%" y="47.50"></text></g><g><title>rustdct::Dct3::process_dct3 (4 samples, 0.40%)</title><rect x="83.3663%" y="117" width="0.3960%" height="15" fill="rgb(244,186,29)" fg:x="842" fg:w="4"/><text x="83.6163%" y="127.50"></text></g><g><title>&lt;rustdct::algorithm::type2and3_splitradix::Type2And3SplitRadix&lt;T&gt; as rustdct::Dct3&lt;T&gt;&gt;::process_dct3_with_scratch (4 samples, 0.40%)</title><rect x="83.3663%" y="101" width="0.3960%" height="15" fill="rgb(234,111,31)" fg:x="842" fg:w="4"/><text x="83.6163%" y="111.50"></text></g><g><title>&lt;rustdct::algorithm::type2and3_splitradix::Type2And3SplitRadix&lt;T&gt; as rustdct::Dct3&lt;T&gt;&gt;::process_dct3_with_scratch (4 samples, 0.40%)</title><rect x="83.3663%" y="85" width="0.3960%" height="15" fill="rgb(241,149,10)" fg:x="842" fg:w="4"/><text x="83.6163%" y="95.50"></text></g><g><title>&lt;rustdct::algorithm::type2and3_splitradix::Type2And3SplitRadix&lt;T&gt; as rustdct::Dct3&lt;T&gt;&gt;::process_dct3_with_scratch (3 samples, 0.30%)</title><rect x="83.4653%" y="69" width="0.2970%" height="15" fill="rgb(249,206,44)" fg:x="843" fg:w="3"/><text x="83.7153%" y="79.50"></text></g><g><title>&lt;rustdct::algorithm::type2and3_splitradix::Type2And3SplitRadix&lt;T&gt; as rustdct::Dct3&lt;T&gt;&gt;::process_dct3_with_scratch (1 samples, 0.10%)</title><rect x="83.6634%" y="53" width="0.0990%" height="15" fill="rgb(251,153,30)" fg:x="845" fg:w="1"/><text x="83.9134%" y="63.50"></text></g><g><title>rustdct::plan::DctPlanner&lt;T&gt;::new (1 samples, 0.10%)</title><rect x="83.7624%" y="117" width="0.0990%" height="15" fill="rgb(239,152,38)" fg:x="846" fg:w="1"/><text x="84.0124%" y="127.50"></text></g><g><title>rustdct::algorithm::type2and3_splitradix::Type2And3SplitRadix&lt;T&gt;::new (2 samples, 0.20%)</title><rect x="83.9604%" y="101" width="0.1980%" height="15" fill="rgb(249,139,47)" fg:x="848" fg:w="2"/><text x="84.2104%" y="111.50"></text></g><g><title>sincos (2 samples, 0.20%)</title><rect x="83.9604%" y="85" width="0.1980%" height="15" fill="rgb(244,64,35)" fg:x="848" fg:w="2"/><text x="84.2104%" y="95.50"></text></g><g><title>rustdct::algorithm::type2and3_splitradix::Type2And3SplitRadix&lt;T&gt;::new (2 samples, 0.20%)</title><rect x="84.1584%" y="85" width="0.1980%" height="15" fill="rgb(216,46,15)" fg:x="850" fg:w="2"/><text x="84.4084%" y="95.50"></text></g><g><title>sincos (2 samples, 0.20%)</title><rect x="84.1584%" y="69" width="0.1980%" height="15" fill="rgb(250,74,19)" fg:x="850" fg:w="2"/><text x="84.4084%" y="79.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (854 samples, 84.55%)</title><rect x="0.0000%" y="165" width="84.5545%" height="15" fill="rgb(249,42,33)" fg:x="0" fg:w="854"/><text x="0.2500%" y="175.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (854 samples, 84.55%)</title><rect x="0.0000%" y="149" width="84.5545%" height="15" fill="rgb(242,149,17)" fg:x="0" fg:w="854"/><text x="0.2500%" y="159.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (854 samples, 84.55%)</title><rect x="0.0000%" y="133" width="84.5545%" height="15" fill="rgb(244,29,21)" fg:x="0" fg:w="854"/><text x="0.2500%" y="143.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>rustdct::plan::DctPlanner&lt;T&gt;::plan_dct2 (7 samples, 0.69%)</title><rect x="83.8614%" y="117" width="0.6931%" height="15" fill="rgb(220,130,37)" fg:x="847" fg:w="7"/><text x="84.1114%" y="127.50"></text></g><g><title>rustdct::plan::DctPlanner&lt;T&gt;::plan_dct2 (4 samples, 0.40%)</title><rect x="84.1584%" y="101" width="0.3960%" height="15" fill="rgb(211,67,2)" fg:x="850" fg:w="4"/><text x="84.4084%" y="111.50"></text></g><g><title>rustdct::plan::DctPlanner&lt;T&gt;::plan_dct2 (2 samples, 0.20%)</title><rect x="84.3564%" y="85" width="0.1980%" height="15" fill="rgb(235,68,52)" fg:x="852" fg:w="2"/><text x="84.6064%" y="95.50"></text></g><g><title>rustdct::algorithm::type2and3_splitradix::Type2And3SplitRadix&lt;T&gt;::new (1 samples, 0.10%)</title><rect x="84.4554%" y="69" width="0.0990%" height="15" fill="rgb(246,142,3)" fg:x="853" fg:w="1"/><text x="84.7054%" y="79.50"></text></g><g><title>sincos (1 samples, 0.10%)</title><rect x="84.4554%" y="53" width="0.0990%" height="15" fill="rgb(241,25,7)" fg:x="853" fg:w="1"/><text x="84.7054%" y="63.50"></text></g><g><title>__powidf2 (28 samples, 2.77%)</title><rect x="85.2475%" y="85" width="2.7723%" height="15" fill="rgb(242,119,39)" fg:x="861" fg:w="28"/><text x="85.4975%" y="95.50">__..</text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::map (79 samples, 7.82%)</title><rect x="84.6535%" y="101" width="7.8218%" height="15" fill="rgb(241,98,45)" fg:x="855" fg:w="79"/><text x="84.9035%" y="111.50">ndarray::im..</text></g><g><title>expf32x (45 samples, 4.46%)</title><rect x="88.0198%" y="85" width="4.4554%" height="15" fill="rgb(254,28,30)" fg:x="889" fg:w="45"/><text x="88.2698%" y="95.50">expf3..</text></g><g><title>ndarray::impl_ops::arithmetic_ops::&lt;impl core::ops::arith::Mul&lt;&amp;ndarray::ArrayBase&lt;S2,E&gt;&gt; for &amp;ndarray::ArrayBase&lt;S,D&gt;&gt;::mul (2 samples, 0.20%)</title><rect x="92.4752%" y="101" width="0.1980%" height="15" fill="rgb(241,142,54)" fg:x="934" fg:w="2"/><text x="92.7252%" y="111.50"></text></g><g><title>ndarray::impl_constructors::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::build_uninit (2 samples, 0.20%)</title><rect x="92.4752%" y="85" width="0.1980%" height="15" fill="rgb(222,85,15)" fg:x="934" fg:w="2"/><text x="92.7252%" y="95.50"></text></g><g><title>ndarray::zip::Zip&lt;(P1,P2,PLast),D&gt;::collect_with_partial (2 samples, 0.20%)</title><rect x="92.4752%" y="69" width="0.1980%" height="15" fill="rgb(210,85,47)" fg:x="934" fg:w="2"/><text x="92.7252%" y="79.50"></text></g><g><title>ndarray::impl_ops::arithmetic_ops::&lt;impl core::ops::arith::Mul&lt;ndarray::ArrayBase&lt;S2,E&gt;&gt; for ndarray::ArrayBase&lt;S,D&gt;&gt;::mul (3 samples, 0.30%)</title><rect x="92.6733%" y="101" width="0.2970%" height="15" fill="rgb(224,206,25)" fg:x="936" fg:w="3"/><text x="92.9233%" y="111.50"></text></g><g><title>argmin::core::executor::Executor&lt;O,S,I&gt;::run (87 samples, 8.61%)</title><rect x="84.5545%" y="133" width="8.6139%" height="15" fill="rgb(243,201,19)" fg:x="854" fg:w="87"/><text x="84.8045%" y="143.50">argmin::core..</text></g><g><title>&lt;kde_diffusion::ZetaGammaLMinusT as argmin::core::problem::CostFunction&gt;::cost (87 samples, 8.61%)</title><rect x="84.5545%" y="117" width="8.6139%" height="15" fill="rgb(236,59,4)" fg:x="854" fg:w="87"/><text x="84.8045%" y="127.50">&lt;kde_diffusi..</text></g><g><title>ndarray::numeric::impl_numeric::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::sum (2 samples, 0.20%)</title><rect x="92.9703%" y="101" width="0.1980%" height="15" fill="rgb(254,179,45)" fg:x="939" fg:w="2"/><text x="93.2203%" y="111.50"></text></g><g><title>kde_diffusion::ZetaGammaLMinusT::new (1 samples, 0.10%)</title><rect x="93.1683%" y="133" width="0.0990%" height="15" fill="rgb(226,14,10)" fg:x="941" fg:w="1"/><text x="93.4183%" y="143.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::map (1 samples, 0.10%)</title><rect x="93.1683%" y="117" width="0.0990%" height="15" fill="rgb(244,27,41)" fg:x="941" fg:w="1"/><text x="93.4183%" y="127.50"></text></g><g><title>__powidf2 (1 samples, 0.10%)</title><rect x="93.1683%" y="101" width="0.0990%" height="15" fill="rgb(235,35,32)" fg:x="941" fg:w="1"/><text x="93.4183%" y="111.50"></text></g><g><title>kde_diffusion::histogram (66 samples, 6.53%)</title><rect x="93.2673%" y="133" width="6.5347%" height="15" fill="rgb(218,68,31)" fg:x="942" fg:w="66"/><text x="93.5173%" y="143.50">kde_diffu..</text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::map (1 samples, 0.10%)</title><rect x="99.8020%" y="133" width="0.0990%" height="15" fill="rgb(207,120,37)" fg:x="1008" fg:w="1"/><text x="100.0520%" y="143.50"></text></g><g><title>expf32x (1 samples, 0.10%)</title><rect x="99.8020%" y="117" width="0.0990%" height="15" fill="rgb(227,98,0)" fg:x="1008" fg:w="1"/><text x="100.0520%" y="127.50"></text></g><g><title>all (1,010 samples, 100%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(207,7,3)" fg:x="0" fg:w="1010"/><text x="0.2500%" y="351.50"></text></g><g><title>kde_1d-71f59804 (1,010 samples, 100.00%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(206,98,19)" fg:x="0" fg:w="1010"/><text x="0.2500%" y="335.50">kde_1d-71f59804</text></g><g><title>_start (1,010 samples, 100.00%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(217,5,26)" fg:x="0" fg:w="1010"/><text x="0.2500%" y="319.50">_start</text></g><g><title>__libc_start_main (1,010 samples, 100.00%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(235,190,38)" fg:x="0" fg:w="1010"/><text x="0.2500%" y="303.50">__libc_start_main</text></g><g><title>main (1,010 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(247,86,24)" fg:x="0" fg:w="1010"/><text x="0.2500%" y="287.50">main</text></g><g><title>std::rt::lang_start_internal (1,010 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(205,101,16)" fg:x="0" fg:w="1010"/><text x="0.2500%" y="271.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::{{closure}} (1,010 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(246,168,33)" fg:x="0" fg:w="1010"/><text x="0.2500%" y="255.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,010 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(231,114,1)" fg:x="0" fg:w="1010"/><text x="0.2500%" y="239.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>kde_1d::main (1,010 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(207,184,53)" fg:x="0" fg:w="1010"/><text x="0.2500%" y="223.50">kde_1d::main</text></g><g><title>kde_1d::criterion_benchmark (1,010 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(224,95,51)" fg:x="0" fg:w="1010"/><text x="0.2500%" y="207.50">kde_1d::criterion_benchmark</text></g><g><title>criterion::routine::Routine::profile (1,010 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(212,188,45)" fg:x="0" fg:w="1010"/><text x="0.2500%" y="191.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (156 samples, 15.45%)</title><rect x="84.5545%" y="165" width="15.4455%" height="15" fill="rgb(223,154,38)" fg:x="854" fg:w="156"/><text x="84.8045%" y="175.50">&lt;criterion::routine::Fun..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (156 samples, 15.45%)</title><rect x="84.5545%" y="149" width="15.4455%" height="15" fill="rgb(251,22,52)" fg:x="854" fg:w="156"/><text x="84.8045%" y="159.50">criterion::bencher::Benc..</text></g><g><title>rustdct::Dct2::process_dct2 (1 samples, 0.10%)</title><rect x="99.9010%" y="133" width="0.0990%" height="15" fill="rgb(229,209,22)" fg:x="1009" fg:w="1"/><text x="100.1510%" y="143.50"></text></g></svg></svg>