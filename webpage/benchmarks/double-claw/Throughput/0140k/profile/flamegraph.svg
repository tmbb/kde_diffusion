<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="422" onload="init(evt)" viewBox="0 0 1200 422" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="422" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="405.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="405.00"> </text><svg id="frames" x="10" width="1180" total_samples="998"><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.10%)</title><rect x="0.0000%" y="101" width="0.1002%" height="15" fill="rgb(238,83,0)" fg:x="0" fg:w="1"/><text x="0.2500%" y="111.50"></text></g><g><title>&lt;argmin::core::state::iterstate::IterState&lt;P,G,J,H,R,F&gt; as argmin::core::state::State&gt;::func_counts (2 samples, 0.20%)</title><rect x="0.0000%" y="133" width="0.2004%" height="15" fill="rgb(221,39,39)" fg:x="0" fg:w="2"/><text x="0.2500%" y="143.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (2 samples, 0.20%)</title><rect x="0.0000%" y="117" width="0.2004%" height="15" fill="rgb(222,119,46)" fg:x="0" fg:w="2"/><text x="0.2500%" y="127.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.10%)</title><rect x="0.1002%" y="101" width="0.1002%" height="15" fill="rgb(222,165,49)" fg:x="1" fg:w="1"/><text x="0.3502%" y="111.50"></text></g><g><title>free (1 samples, 0.10%)</title><rect x="1.4028%" y="117" width="0.1002%" height="15" fill="rgb(219,113,52)" fg:x="14" fg:w="1"/><text x="1.6528%" y="127.50"></text></g><g><title>__powidf2 (108 samples, 10.82%)</title><rect x="5.5110%" y="101" width="10.8216%" height="15" fill="rgb(214,7,15)" fg:x="55" fg:w="108"/><text x="5.7610%" y="111.50">__powidf2</text></g><g><title>expf32x (220 samples, 22.04%)</title><rect x="16.3327%" y="101" width="22.0441%" height="15" fill="rgb(235,32,4)" fg:x="163" fg:w="220"/><text x="16.5827%" y="111.50">expf32x</text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::map (372 samples, 37.27%)</title><rect x="1.5030%" y="117" width="37.2745%" height="15" fill="rgb(238,90,54)" fg:x="15" fg:w="372"/><text x="1.7530%" y="127.50">ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::map</text></g><g><title>malloc (4 samples, 0.40%)</title><rect x="38.3768%" y="101" width="0.4008%" height="15" fill="rgb(213,208,19)" fg:x="383" fg:w="4"/><text x="38.6268%" y="111.50"></text></g><g><title>malloc (2 samples, 0.20%)</title><rect x="38.8778%" y="85" width="0.2004%" height="15" fill="rgb(233,156,4)" fg:x="388" fg:w="2"/><text x="39.1278%" y="95.50"></text></g><g><title>ndarray::impl_ops::arithmetic_ops::&lt;impl core::ops::arith::Mul&lt;&amp;ndarray::ArrayBase&lt;S2,E&gt;&gt; for &amp;ndarray::ArrayBase&lt;S,D&gt;&gt;::mul (12 samples, 1.20%)</title><rect x="38.7776%" y="117" width="1.2024%" height="15" fill="rgb(207,194,5)" fg:x="387" fg:w="12"/><text x="39.0276%" y="127.50"></text></g><g><title>ndarray::impl_constructors::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::build_uninit (12 samples, 1.20%)</title><rect x="38.7776%" y="101" width="1.2024%" height="15" fill="rgb(206,111,30)" fg:x="387" fg:w="12"/><text x="39.0276%" y="111.50"></text></g><g><title>ndarray::zip::Zip&lt;(P1,P2,PLast),D&gt;::collect_with_partial (9 samples, 0.90%)</title><rect x="39.0782%" y="85" width="0.9018%" height="15" fill="rgb(243,70,54)" fg:x="390" fg:w="9"/><text x="39.3282%" y="95.50"></text></g><g><title>ndarray::impl_ops::arithmetic_ops::&lt;impl core::ops::arith::Mul&lt;ndarray::ArrayBase&lt;S2,E&gt;&gt; for ndarray::ArrayBase&lt;S,D&gt;&gt;::mul (11 samples, 1.10%)</title><rect x="39.9800%" y="117" width="1.1022%" height="15" fill="rgb(242,28,8)" fg:x="399" fg:w="11"/><text x="40.2300%" y="127.50"></text></g><g><title>free (1 samples, 0.10%)</title><rect x="40.9820%" y="101" width="0.1002%" height="15" fill="rgb(219,106,18)" fg:x="409" fg:w="1"/><text x="41.2320%" y="111.50"></text></g><g><title>ndarray::numeric::impl_numeric::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::sum (5 samples, 0.50%)</title><rect x="41.0822%" y="117" width="0.5010%" height="15" fill="rgb(244,222,10)" fg:x="410" fg:w="5"/><text x="41.3322%" y="127.50"></text></g><g><title>argmin::core::executor::Executor&lt;O,S,I&gt;::run (416 samples, 41.68%)</title><rect x="0.0000%" y="149" width="41.6834%" height="15" fill="rgb(236,179,52)" fg:x="0" fg:w="416"/><text x="0.2500%" y="159.50">argmin::core::executor::Executor&lt;O,S,I&gt;::run</text></g><g><title>&lt;kde_diffusion::ZetaGammaLMinusT as argmin::core::problem::CostFunction&gt;::cost (414 samples, 41.48%)</title><rect x="0.2004%" y="133" width="41.4830%" height="15" fill="rgb(213,23,39)" fg:x="2" fg:w="414"/><text x="0.4504%" y="143.50">&lt;kde_diffusion::ZetaGammaLMinusT as argmin::core::problem::CostFunct..</text></g><g><title>powf64 (1 samples, 0.10%)</title><rect x="41.5832%" y="117" width="0.1002%" height="15" fill="rgb(238,48,10)" fg:x="415" fg:w="1"/><text x="41.8332%" y="127.50"></text></g><g><title>kde_diffusion::ZetaGammaLMinusT::new (3 samples, 0.30%)</title><rect x="41.6834%" y="149" width="0.3006%" height="15" fill="rgb(251,196,23)" fg:x="416" fg:w="3"/><text x="41.9334%" y="159.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::map (2 samples, 0.20%)</title><rect x="41.7836%" y="133" width="0.2004%" height="15" fill="rgb(250,152,24)" fg:x="417" fg:w="2"/><text x="42.0336%" y="143.50"></text></g><g><title>__powidf2 (2 samples, 0.20%)</title><rect x="41.7836%" y="117" width="0.2004%" height="15" fill="rgb(209,150,17)" fg:x="417" fg:w="2"/><text x="42.0336%" y="127.50"></text></g><g><title>kde_diffusion::histogram (379 samples, 37.98%)</title><rect x="41.9840%" y="149" width="37.9760%" height="15" fill="rgb(234,202,34)" fg:x="419" fg:w="379"/><text x="42.2340%" y="159.50">kde_diffusion::histogram</text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::map (6 samples, 0.60%)</title><rect x="79.9599%" y="149" width="0.6012%" height="15" fill="rgb(253,148,53)" fg:x="798" fg:w="6"/><text x="80.2099%" y="159.50"></text></g><g><title>expf32x (6 samples, 0.60%)</title><rect x="79.9599%" y="133" width="0.6012%" height="15" fill="rgb(218,129,16)" fg:x="798" fg:w="6"/><text x="80.2099%" y="143.50"></text></g><g><title>&lt;rustdct::algorithm::type2and3_butterflies::Type2And3Butterfly8&lt;T&gt; as rustdct::Dct2&lt;T&gt;&gt;::process_dct2_with_scratch (1 samples, 0.10%)</title><rect x="80.6613%" y="69" width="0.1002%" height="15" fill="rgb(216,85,19)" fg:x="805" fg:w="1"/><text x="80.9113%" y="79.50"></text></g><g><title>rustdct::Dct2::process_dct2 (4 samples, 0.40%)</title><rect x="80.5611%" y="149" width="0.4008%" height="15" fill="rgb(235,228,7)" fg:x="804" fg:w="4"/><text x="80.8111%" y="159.50"></text></g><g><title>&lt;rustdct::algorithm::type2and3_splitradix::Type2And3SplitRadix&lt;T&gt; as rustdct::Dct2&lt;T&gt;&gt;::process_dct2_with_scratch (4 samples, 0.40%)</title><rect x="80.5611%" y="133" width="0.4008%" height="15" fill="rgb(245,175,0)" fg:x="804" fg:w="4"/><text x="80.8111%" y="143.50"></text></g><g><title>&lt;rustdct::algorithm::type2and3_splitradix::Type2And3SplitRadix&lt;T&gt; as rustdct::Dct2&lt;T&gt;&gt;::process_dct2_with_scratch (4 samples, 0.40%)</title><rect x="80.5611%" y="117" width="0.4008%" height="15" fill="rgb(208,168,36)" fg:x="804" fg:w="4"/><text x="80.8111%" y="127.50"></text></g><g><title>&lt;rustdct::algorithm::type2and3_splitradix::Type2And3SplitRadix&lt;T&gt; as rustdct::Dct2&lt;T&gt;&gt;::process_dct2_with_scratch (4 samples, 0.40%)</title><rect x="80.5611%" y="101" width="0.4008%" height="15" fill="rgb(246,171,24)" fg:x="804" fg:w="4"/><text x="80.8111%" y="111.50"></text></g><g><title>&lt;rustdct::algorithm::type2and3_splitradix::Type2And3SplitRadix&lt;T&gt; as rustdct::Dct2&lt;T&gt;&gt;::process_dct2_with_scratch (3 samples, 0.30%)</title><rect x="80.6613%" y="85" width="0.3006%" height="15" fill="rgb(215,142,24)" fg:x="805" fg:w="3"/><text x="80.9113%" y="95.50"></text></g><g><title>&lt;rustdct::algorithm::type2and3_splitradix::Type2And3SplitRadix&lt;T&gt; as rustdct::Dct2&lt;T&gt;&gt;::process_dct2_with_scratch (2 samples, 0.20%)</title><rect x="80.7615%" y="69" width="0.2004%" height="15" fill="rgb(250,187,7)" fg:x="806" fg:w="2"/><text x="81.0115%" y="79.50"></text></g><g><title>&lt;rustdct::algorithm::type2and3_butterflies::Type2And3Butterfly16&lt;T&gt; as rustdct::Dct2&lt;T&gt;&gt;::process_dct2_with_scratch (1 samples, 0.10%)</title><rect x="80.8617%" y="53" width="0.1002%" height="15" fill="rgb(228,66,33)" fg:x="807" fg:w="1"/><text x="81.1117%" y="63.50"></text></g><g><title>&lt;rustdct::algorithm::type2and3_butterflies::Type2And3Butterfly16&lt;T&gt; as rustdct::Dct3&lt;T&gt;&gt;::process_dct3_with_scratch (1 samples, 0.10%)</title><rect x="80.9619%" y="69" width="0.1002%" height="15" fill="rgb(234,215,21)" fg:x="808" fg:w="1"/><text x="81.2119%" y="79.50"></text></g><g><title>rustdct::Dct3::process_dct3 (2 samples, 0.20%)</title><rect x="80.9619%" y="149" width="0.2004%" height="15" fill="rgb(222,191,20)" fg:x="808" fg:w="2"/><text x="81.2119%" y="159.50"></text></g><g><title>&lt;rustdct::algorithm::type2and3_splitradix::Type2And3SplitRadix&lt;T&gt; as rustdct::Dct3&lt;T&gt;&gt;::process_dct3_with_scratch (2 samples, 0.20%)</title><rect x="80.9619%" y="133" width="0.2004%" height="15" fill="rgb(245,79,54)" fg:x="808" fg:w="2"/><text x="81.2119%" y="143.50"></text></g><g><title>&lt;rustdct::algorithm::type2and3_splitradix::Type2And3SplitRadix&lt;T&gt; as rustdct::Dct3&lt;T&gt;&gt;::process_dct3_with_scratch (2 samples, 0.20%)</title><rect x="80.9619%" y="117" width="0.2004%" height="15" fill="rgb(240,10,37)" fg:x="808" fg:w="2"/><text x="81.2119%" y="127.50"></text></g><g><title>&lt;rustdct::algorithm::type2and3_splitradix::Type2And3SplitRadix&lt;T&gt; as rustdct::Dct3&lt;T&gt;&gt;::process_dct3_with_scratch (2 samples, 0.20%)</title><rect x="80.9619%" y="101" width="0.2004%" height="15" fill="rgb(214,192,32)" fg:x="808" fg:w="2"/><text x="81.2119%" y="111.50"></text></g><g><title>&lt;rustdct::algorithm::type2and3_splitradix::Type2And3SplitRadix&lt;T&gt; as rustdct::Dct3&lt;T&gt;&gt;::process_dct3_with_scratch (2 samples, 0.20%)</title><rect x="80.9619%" y="85" width="0.2004%" height="15" fill="rgb(209,36,54)" fg:x="808" fg:w="2"/><text x="81.2119%" y="95.50"></text></g><g><title>&lt;rustdct::algorithm::type2and3_splitradix::Type2And3SplitRadix&lt;T&gt; as rustdct::Dct3&lt;T&gt;&gt;::process_dct3_with_scratch (1 samples, 0.10%)</title><rect x="81.0621%" y="69" width="0.1002%" height="15" fill="rgb(220,10,11)" fg:x="809" fg:w="1"/><text x="81.3121%" y="79.50"></text></g><g><title>&lt;rustdct::algorithm::type2and3_splitradix::Type2And3SplitRadix&lt;T&gt; as rustdct::Dct3&lt;T&gt;&gt;::process_dct3_with_scratch (1 samples, 0.10%)</title><rect x="81.0621%" y="53" width="0.1002%" height="15" fill="rgb(221,106,17)" fg:x="809" fg:w="1"/><text x="81.3121%" y="63.50"></text></g><g><title>rustdct::algorithm::type2and3_splitradix::Type2And3SplitRadix&lt;T&gt;::new (3 samples, 0.30%)</title><rect x="81.1623%" y="133" width="0.3006%" height="15" fill="rgb(251,142,44)" fg:x="810" fg:w="3"/><text x="81.4123%" y="143.50"></text></g><g><title>sincos (2 samples, 0.20%)</title><rect x="81.2625%" y="117" width="0.2004%" height="15" fill="rgb(238,13,15)" fg:x="811" fg:w="2"/><text x="81.5125%" y="127.50"></text></g><g><title>rustdct::algorithm::type2and3_splitradix::Type2And3SplitRadix&lt;T&gt;::new (1 samples, 0.10%)</title><rect x="81.4629%" y="117" width="0.1002%" height="15" fill="rgb(208,107,27)" fg:x="813" fg:w="1"/><text x="81.7129%" y="127.50"></text></g><g><title>sincos (1 samples, 0.10%)</title><rect x="81.4629%" y="101" width="0.1002%" height="15" fill="rgb(205,136,37)" fg:x="813" fg:w="1"/><text x="81.7129%" y="111.50"></text></g><g><title>rustdct::algorithm::type2and3_splitradix::Type2And3SplitRadix&lt;T&gt;::new (1 samples, 0.10%)</title><rect x="81.5631%" y="69" width="0.1002%" height="15" fill="rgb(250,205,27)" fg:x="814" fg:w="1"/><text x="81.8131%" y="79.50"></text></g><g><title>sincos (1 samples, 0.10%)</title><rect x="81.5631%" y="53" width="0.1002%" height="15" fill="rgb(210,80,43)" fg:x="814" fg:w="1"/><text x="81.8131%" y="63.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (816 samples, 81.76%)</title><rect x="0.0000%" y="197" width="81.7635%" height="15" fill="rgb(247,160,36)" fg:x="0" fg:w="816"/><text x="0.2500%" y="207.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (816 samples, 81.76%)</title><rect x="0.0000%" y="181" width="81.7635%" height="15" fill="rgb(234,13,49)" fg:x="0" fg:w="816"/><text x="0.2500%" y="191.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (816 samples, 81.76%)</title><rect x="0.0000%" y="165" width="81.7635%" height="15" fill="rgb(234,122,0)" fg:x="0" fg:w="816"/><text x="0.2500%" y="175.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>rustdct::plan::DctPlanner&lt;T&gt;::plan_dct2 (6 samples, 0.60%)</title><rect x="81.1623%" y="149" width="0.6012%" height="15" fill="rgb(207,146,38)" fg:x="810" fg:w="6"/><text x="81.4123%" y="159.50"></text></g><g><title>rustdct::plan::DctPlanner&lt;T&gt;::plan_dct2 (3 samples, 0.30%)</title><rect x="81.4629%" y="133" width="0.3006%" height="15" fill="rgb(207,177,25)" fg:x="813" fg:w="3"/><text x="81.7129%" y="143.50"></text></g><g><title>rustdct::plan::DctPlanner&lt;T&gt;::plan_dct2 (2 samples, 0.20%)</title><rect x="81.5631%" y="117" width="0.2004%" height="15" fill="rgb(211,178,42)" fg:x="814" fg:w="2"/><text x="81.8131%" y="127.50"></text></g><g><title>rustdct::plan::DctPlanner&lt;T&gt;::plan_dct2 (2 samples, 0.20%)</title><rect x="81.5631%" y="101" width="0.2004%" height="15" fill="rgb(230,69,54)" fg:x="814" fg:w="2"/><text x="81.8131%" y="111.50"></text></g><g><title>rustdct::plan::DctPlanner&lt;T&gt;::plan_dct2 (2 samples, 0.20%)</title><rect x="81.5631%" y="85" width="0.2004%" height="15" fill="rgb(214,135,41)" fg:x="814" fg:w="2"/><text x="81.8131%" y="95.50"></text></g><g><title>rustdct::plan::DctPlanner&lt;T&gt;::plan_dct2 (1 samples, 0.10%)</title><rect x="81.6633%" y="69" width="0.1002%" height="15" fill="rgb(237,67,25)" fg:x="815" fg:w="1"/><text x="81.9133%" y="79.50"></text></g><g><title>rustdct::algorithm::type2and3_splitradix::Type2And3SplitRadix&lt;T&gt;::new (1 samples, 0.10%)</title><rect x="81.6633%" y="53" width="0.1002%" height="15" fill="rgb(222,189,50)" fg:x="815" fg:w="1"/><text x="81.9133%" y="63.50"></text></g><g><title>&lt;rustdct::algorithm::type2and3_butterflies::Type2And3Butterfly8&lt;T&gt; as rustfft::Length&gt;::len (1 samples, 0.10%)</title><rect x="81.6633%" y="37" width="0.1002%" height="15" fill="rgb(245,148,34)" fg:x="815" fg:w="1"/><text x="81.9133%" y="47.50"></text></g><g><title>&lt;argmin::core::state::iterstate::IterState&lt;P,G,J,H,R,F&gt; as argmin::core::state::State&gt;::func_counts (1 samples, 0.10%)</title><rect x="81.8637%" y="149" width="0.1002%" height="15" fill="rgb(222,29,6)" fg:x="817" fg:w="1"/><text x="82.1137%" y="159.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.10%)</title><rect x="81.8637%" y="133" width="0.1002%" height="15" fill="rgb(221,189,43)" fg:x="817" fg:w="1"/><text x="82.1137%" y="143.50"></text></g><g><title>__powidf2 (26 samples, 2.61%)</title><rect x="82.8657%" y="117" width="2.6052%" height="15" fill="rgb(207,36,27)" fg:x="827" fg:w="26"/><text x="83.1157%" y="127.50">__..</text></g><g><title>expf32x (46 samples, 4.61%)</title><rect x="85.4709%" y="117" width="4.6092%" height="15" fill="rgb(217,90,24)" fg:x="853" fg:w="46"/><text x="85.7209%" y="127.50">expf3..</text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::map (79 samples, 7.92%)</title><rect x="82.2645%" y="133" width="7.9158%" height="15" fill="rgb(224,66,35)" fg:x="821" fg:w="79"/><text x="82.5145%" y="143.50">ndarray::im..</text></g><g><title>malloc (1 samples, 0.10%)</title><rect x="90.0802%" y="117" width="0.1002%" height="15" fill="rgb(221,13,50)" fg:x="899" fg:w="1"/><text x="90.3302%" y="127.50"></text></g><g><title>&lt;kde_diffusion::ZetaGammaLMinusT as argmin::core::problem::CostFunction&gt;::cost (84 samples, 8.42%)</title><rect x="81.9639%" y="149" width="8.4168%" height="15" fill="rgb(236,68,49)" fg:x="818" fg:w="84"/><text x="82.2139%" y="159.50">&lt;kde_diffusi..</text></g><g><title>ndarray::impl_ops::arithmetic_ops::&lt;impl core::ops::arith::Mul&lt;ndarray::ArrayBase&lt;S2,E&gt;&gt; for ndarray::ArrayBase&lt;S,D&gt;&gt;::mul (2 samples, 0.20%)</title><rect x="90.1804%" y="133" width="0.2004%" height="15" fill="rgb(229,146,28)" fg:x="900" fg:w="2"/><text x="90.4304%" y="143.50"></text></g><g><title>argmin::core::executor::Executor&lt;O,S,I&gt;::run (87 samples, 8.72%)</title><rect x="81.7635%" y="165" width="8.7174%" height="15" fill="rgb(225,31,38)" fg:x="816" fg:w="87"/><text x="82.0135%" y="175.50">argmin::core..</text></g><g><title>std::sys::pal::unix::time::Timespec::now (1 samples, 0.10%)</title><rect x="90.3808%" y="149" width="0.1002%" height="15" fill="rgb(250,208,3)" fg:x="902" fg:w="1"/><text x="90.6308%" y="159.50"></text></g><g><title>clock_gettime (1 samples, 0.10%)</title><rect x="90.3808%" y="133" width="0.1002%" height="15" fill="rgb(246,54,23)" fg:x="902" fg:w="1"/><text x="90.6308%" y="143.50"></text></g><g><title>kde_diffusion::histogram (89 samples, 8.92%)</title><rect x="90.4810%" y="165" width="8.9178%" height="15" fill="rgb(243,76,11)" fg:x="903" fg:w="89"/><text x="90.7310%" y="175.50">kde_diffusion..</text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::map (3 samples, 0.30%)</title><rect x="99.3988%" y="165" width="0.3006%" height="15" fill="rgb(245,21,50)" fg:x="992" fg:w="3"/><text x="99.6488%" y="175.50"></text></g><g><title>expf32x (3 samples, 0.30%)</title><rect x="99.3988%" y="149" width="0.3006%" height="15" fill="rgb(228,9,43)" fg:x="992" fg:w="3"/><text x="99.6488%" y="159.50"></text></g><g><title>rustdct::Dct2::process_dct2 (1 samples, 0.10%)</title><rect x="99.6994%" y="165" width="0.1002%" height="15" fill="rgb(208,100,47)" fg:x="995" fg:w="1"/><text x="99.9494%" y="175.50"></text></g><g><title>&lt;rustdct::algorithm::type2and3_splitradix::Type2And3SplitRadix&lt;T&gt; as rustdct::Dct2&lt;T&gt;&gt;::process_dct2_with_scratch (1 samples, 0.10%)</title><rect x="99.6994%" y="149" width="0.1002%" height="15" fill="rgb(232,26,8)" fg:x="995" fg:w="1"/><text x="99.9494%" y="159.50"></text></g><g><title>&lt;rustdct::algorithm::type2and3_splitradix::Type2And3SplitRadix&lt;T&gt; as rustdct::Dct2&lt;T&gt;&gt;::process_dct2_with_scratch (1 samples, 0.10%)</title><rect x="99.6994%" y="133" width="0.1002%" height="15" fill="rgb(216,166,38)" fg:x="995" fg:w="1"/><text x="99.9494%" y="143.50"></text></g><g><title>&lt;rustdct::algorithm::type2and3_splitradix::Type2And3SplitRadix&lt;T&gt; as rustdct::Dct2&lt;T&gt;&gt;::process_dct2_with_scratch (1 samples, 0.10%)</title><rect x="99.6994%" y="117" width="0.1002%" height="15" fill="rgb(251,202,51)" fg:x="995" fg:w="1"/><text x="99.9494%" y="127.50"></text></g><g><title>&lt;rustdct::algorithm::type2and3_splitradix::Type2And3SplitRadix&lt;T&gt; as rustdct::Dct2&lt;T&gt;&gt;::process_dct2_with_scratch (1 samples, 0.10%)</title><rect x="99.6994%" y="101" width="0.1002%" height="15" fill="rgb(254,216,34)" fg:x="995" fg:w="1"/><text x="99.9494%" y="111.50"></text></g><g><title>&lt;rustdct::algorithm::type2and3_butterflies::Type2And3Butterfly8&lt;T&gt; as rustdct::Dct2&lt;T&gt;&gt;::process_dct2_with_scratch (1 samples, 0.10%)</title><rect x="99.6994%" y="85" width="0.1002%" height="15" fill="rgb(251,32,27)" fg:x="995" fg:w="1"/><text x="99.9494%" y="95.50"></text></g><g><title>rustdct::Dct3::process_dct3 (1 samples, 0.10%)</title><rect x="99.7996%" y="165" width="0.1002%" height="15" fill="rgb(208,127,28)" fg:x="996" fg:w="1"/><text x="100.0496%" y="175.50"></text></g><g><title>&lt;rustdct::algorithm::type2and3_splitradix::Type2And3SplitRadix&lt;T&gt; as rustdct::Dct3&lt;T&gt;&gt;::process_dct3_with_scratch (1 samples, 0.10%)</title><rect x="99.7996%" y="149" width="0.1002%" height="15" fill="rgb(224,137,22)" fg:x="996" fg:w="1"/><text x="100.0496%" y="159.50"></text></g><g><title>&lt;rustdct::algorithm::type2and3_splitradix::Type2And3SplitRadix&lt;T&gt; as rustdct::Dct3&lt;T&gt;&gt;::process_dct3_with_scratch (1 samples, 0.10%)</title><rect x="99.7996%" y="133" width="0.1002%" height="15" fill="rgb(254,70,32)" fg:x="996" fg:w="1"/><text x="100.0496%" y="143.50"></text></g><g><title>all (998 samples, 100%)</title><rect x="0.0000%" y="373" width="100.0000%" height="15" fill="rgb(229,75,37)" fg:x="0" fg:w="998"/><text x="0.2500%" y="383.50"></text></g><g><title>kde_1d-71f59804 (998 samples, 100.00%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(252,64,23)" fg:x="0" fg:w="998"/><text x="0.2500%" y="367.50">kde_1d-71f59804</text></g><g><title>_start (998 samples, 100.00%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(232,162,48)" fg:x="0" fg:w="998"/><text x="0.2500%" y="351.50">_start</text></g><g><title>__libc_start_main (998 samples, 100.00%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(246,160,12)" fg:x="0" fg:w="998"/><text x="0.2500%" y="335.50">__libc_start_main</text></g><g><title>main (998 samples, 100.00%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(247,166,0)" fg:x="0" fg:w="998"/><text x="0.2500%" y="319.50">main</text></g><g><title>std::rt::lang_start_internal (998 samples, 100.00%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(249,219,21)" fg:x="0" fg:w="998"/><text x="0.2500%" y="303.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::{{closure}} (998 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(205,209,3)" fg:x="0" fg:w="998"/><text x="0.2500%" y="287.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (998 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(243,44,1)" fg:x="0" fg:w="998"/><text x="0.2500%" y="271.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>kde_1d::main (998 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(206,159,16)" fg:x="0" fg:w="998"/><text x="0.2500%" y="255.50">kde_1d::main</text></g><g><title>kde_1d::criterion_benchmark (998 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(244,77,30)" fg:x="0" fg:w="998"/><text x="0.2500%" y="239.50">kde_1d::criterion_benchmark</text></g><g><title>criterion::routine::Routine::profile (998 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(218,69,12)" fg:x="0" fg:w="998"/><text x="0.2500%" y="223.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (182 samples, 18.24%)</title><rect x="81.7635%" y="197" width="18.2365%" height="15" fill="rgb(212,87,7)" fg:x="816" fg:w="182"/><text x="82.0135%" y="207.50">&lt;criterion::routine::Functio..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (182 samples, 18.24%)</title><rect x="81.7635%" y="181" width="18.2365%" height="15" fill="rgb(245,114,25)" fg:x="816" fg:w="182"/><text x="82.0135%" y="191.50">criterion::bencher::Bencher&lt;..</text></g><g><title>rustdct::plan::DctPlanner&lt;T&gt;::plan_dct2 (1 samples, 0.10%)</title><rect x="99.8998%" y="165" width="0.1002%" height="15" fill="rgb(210,61,42)" fg:x="997" fg:w="1"/><text x="100.1498%" y="175.50"></text></g><g><title>rustdct::plan::DctPlanner&lt;T&gt;::plan_dct2 (1 samples, 0.10%)</title><rect x="99.8998%" y="149" width="0.1002%" height="15" fill="rgb(211,52,33)" fg:x="997" fg:w="1"/><text x="100.1498%" y="159.50"></text></g><g><title>rustdct::plan::DctPlanner&lt;T&gt;::plan_dct2 (1 samples, 0.10%)</title><rect x="99.8998%" y="133" width="0.1002%" height="15" fill="rgb(234,58,33)" fg:x="997" fg:w="1"/><text x="100.1498%" y="143.50"></text></g><g><title>rustdct::algorithm::type2and3_splitradix::Type2And3SplitRadix&lt;T&gt;::new (1 samples, 0.10%)</title><rect x="99.8998%" y="117" width="0.1002%" height="15" fill="rgb(220,115,36)" fg:x="997" fg:w="1"/><text x="100.1498%" y="127.50"></text></g><g><title>sincos (1 samples, 0.10%)</title><rect x="99.8998%" y="101" width="0.1002%" height="15" fill="rgb(243,153,54)" fg:x="997" fg:w="1"/><text x="100.1498%" y="111.50"></text></g></svg></svg>